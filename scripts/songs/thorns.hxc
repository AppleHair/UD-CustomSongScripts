import flixel.FlxG;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.effects.RetroCameraFade;
import funkin.graphics.FunkinSprite;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import funkin.util.Constants;

class ThornsSong extends Song {
    // Set these on onCountDownStart through
    // a module to override default behavior
    public var hasPlayedCutscene:Bool = false;
    public var onlyDialogue:Bool = false;
    public var senpaiCrazyImagePath:String = 'weeb/senpaiCrazy';
    public var senpaiDeathSoundPath:String = 'Senpai_Dies';
    public var redFadeColor:Int = 0xFFFF1B31;
    public var conversationId:String = 'thorns';

    function new() {
        super("thorns");
    }

    public override function onCountdownStart(event:CountdownScriptEvent):Void {
        super.onCountdownStart(event);

        if (!PlayStatePlaylist.isStoryMode) hasPlayedCutscene = true;

        if (!hasPlayedCutscene) {
            trace('Pausing countdown to play cutscene.');

            hasPlayedCutscene = true;

            startCutscene();
            event.cancel(); // CANCEL THE COUNTDOWN!
        }
    }

    function startCutscene() {
        if (onlyDialogue) {
            startDialogue();
            return;
        }

        trace('Hit start of song! Starting cutscene.');

        PlayState.instance.disableKeys = true;
        PlayState.instance.camHUD.visible = false;
        PlayState.instance.camCutscene.visible = true;

        var red = new FunkinSprite(-20, -20).makeSolidColor(FlxG.width * 1.5, FlxG.height * 1.5, 0xFFFFFFFF);
        red.color = redFadeColor;
        red.cameras = [PlayState.instance.camCutscene];
        red.alpha = 1.0;
        PlayState.instance.add(red);

        var senpaiCrazy = FunkinSprite.createSparrow(0, 0, senpaiCrazyImagePath);
        senpaiCrazy.cameras = [PlayState.instance.camCutscene];
        senpaiCrazy.animation.addByPrefix('idle', 'Senpai Pre Explosion instance 1', 24, false);
        senpaiCrazy.setGraphicSize(Std.int(senpaiCrazy.width * Constants.PIXEL_ART_SCALE));
        senpaiCrazy.antialiasing = false;
        senpaiCrazy.pixelPerfectRender = true;
        senpaiCrazy.pixelPerfectPosition = true;

        senpaiCrazy.scrollFactor.set();
        senpaiCrazy.updateHitbox();
        senpaiCrazy.screenCenter();
        senpaiCrazy.x += senpaiCrazy.width / 5;

        senpaiCrazy.alpha = 0;

        PlayState.instance.add(senpaiCrazy);

        // Senpai fades in stepwise rather than linear.
        new FlxTimer().start(0.3, function(timer:FlxTimer) {
            senpaiCrazy.alpha += 0.15;

            if (senpaiCrazy.alpha < 1) {
                timer.reset();
            } else {
                senpaiCrazy.alpha = 1;

                // Play the actual animation.
                senpaiCrazy.animation.play('idle');

                // Play the SFX alongside it.
                trace('Playing senpai death SFX.');
                FunkinSound.playOnce(Paths.sound(senpaiDeathSoundPath), 1.0, function () {
                    trace('Senpai death SFX done.');
                    // Called when the sound completes. Clean up the cutscene here.
                    // Hard cut to the cutscene.
                    PlayState.instance.remove(red);

                    RetroCameraFade.fadeBlack(PlayState.instance.camCutscene, 6, 1.4);
                    RetroCameraFade.fadeBlack(PlayState.instance.camGame, 6, 1.4);
                    new FlxTimer().start(1.6, _ -> {
                        startDialogue();
                    });
                    // PlayState.instance.camCutscene.fade(0xFFEEEEEE, 0.8, true);
                });

                // Fade to white 3.2 seconds into the cutscene.
                new FlxTimer().start(3.2, function(deadTime:FlxTimer) {
                    RetroCameraFade.fadeWhite(PlayState.instance.camCutscene, 8, 1.4);
                    new FlxTimer().start(1.4, function(timer:FlxTimer) {
                        red.color = 0xFFFFFFFF;
                        PlayState.instance.remove(senpaiCrazy);

                        PlayState.instance.camCutscene.filters = [];
                        RetroCameraFade.fadeToBlack(PlayState.instance.camCutscene, 8, 0.8);
                    });

                    // PlayState.instance.camCutscene.fade(0xFFEEEEEE, 1.6, false);
                });
            }
        });
    }

    function startDialogue() {
        PlayState.instance.disableKeys = false;
        PlayState.instance.startConversation(conversationId);
    }

    /**
     * Don't replay the cutscene between restarts.
     */
    function onSongRetry(event:ScriptEvent) {
        super.onSongRetry(event);

        hasPlayedCutscene = true;
    }

    /**
     * Replay the cutscene after leaving the song.
     */
    function onCreate(event:ScriptEvent):Void {
        super.onCreate(event);

        hasPlayedCutscene = false;
        onlyDialogue = false;
        redFadeColor = 0xFFFF1B31;
        senpaiCrazyImagePath = 'weeb/senpaiCrazy';
        senpaiDeathSoundPath = 'Senpai_Dies';
        conversationId = 'thorns';
    }

    public override function onDialogueEnd() {
        // We may need to wait for the outro to play.
        Countdown.performCountdown();
    }
}